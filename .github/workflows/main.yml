name: Build

on:
  workflow_dispatch:
  # push:
  #   tags:
  #     - 'v*.*.*'  # Triggers the workflow on version tags like v1.0.0, v2.1.3, etc.
    # inputs:
    #   version:
    #     type: string
    #     description: "Set the version number of this build"
    #     required: true
      
    #   distro:
    #     type: choice
    #     default: Release
    #     description: Set the distro channel of this build
    #     required: true
    #     options: 
    #     - Alpha
    #     - Beta
    #     - Release

jobs:
  Build-Linux:
    runs-on: ubuntu-latest
    steps:
      - name: Install Checkout@v3
        uses: actions/checkout@v3

      - name: Install Flutter 
        uses: flutter-actions/setup-flutter@v3
        with:
          cache: true
          cache-sdk: true
          version: 3.27.0
          channel: 'stable' # or: 'beta', 'dev', 'master' (or 'main')
          
      - name: Install flutter distributor dependencies
        run: |
          sudo apt-get update --fix-missing
          sudo apt install locate
          sudo apt install rpm patchelf
          sudo apt-get install libgtk-3-0 libblkid1 liblzma5
          sudo apt-get install clang cmake git ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev

          wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x appimagetool

          sudo apt install fuse
          sudo mv appimagetool /usr/local/bin/
      
      - name: Install Flutter Distributor
        run: |
          dart pub global activate flutter_distributor
          export PATH="$PATH":"$HOME/.pub-cache/bin"

      - name: Distribute App
        run: flutter_distributor release --name dev-release

      - name: Find Release Folder
        id: find_release_folder
        run: |
          # Function to find the deepest directory
          get_deepest_path() {
              local path="$1"
              local deepest_path="$path"
              local current_path=""

              # Loop through each item in the current directory
              for item in "$path"/*; do
                  # Check if the item is a directory
                  if [ -d "$item" ]; then
                      # Recursively find the deepest directory in the subdirectory
                      current_path=$(get_deepest_path "$item")

                      # Compare depths and update if the current one is deeper
                      if [ "${#current_path}" -gt "${#deepest_path}" ]; then
                          deepest_path="$current_path"
                      fi
                  fi
              done

              echo "$deepest_path"  # Return the deepest path found
          }


          # Get the deepest directory path
          result=$(get_deepest_path "./dist")
          
          echo "::set-output name=release_folder::$result" # Set output
          # echo "release_folder=$result" >> $GITHUB_OUTPUT  # Set output

      - name: Parse Version
        id: parse_version
        run: |
          match=$(grep -E 'version: [0-9]+\.[0-9]+\.[0-9]+' pubspec.yaml)
          version=$(echo "$match" | sed 's/version: //')

          echo "::set-output name=version::$version" # Set output
          # echo "version=$version" >> $GITHUB_OUTPUT  # Set output

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          tag_name: "v${{ steps.parse_version.outputs.version }}"
          name: "v${{ steps.parse_version.outputs.version }}"
          files: "${{ steps.find_release_folder.outputs.release_folder }}/*"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Build-Windows:
    runs-on: windows-latest
    steps:
      - name: Install Checkout@v3
        uses: actions/checkout@v3

      - name: Install Flutter 
        uses: flutter-actions/setup-flutter@v3
        with:
          cache: true
          cache-sdk: true
          version: 3.27.0
          channel: 'stable' # or: 'beta', 'dev', 'master' (or 'main')
      
      - name: Install Inno Setup
        run: choco install innosetup

      - name: Install Flutter Distributor
        run: |
          dart pub global activate flutter_distributor
          $env:PATH += ";C:\Users\runneradmin\AppData\Local\Pub\Cache\bin"
          
      - name: Distribute App
        run: flutter_distributor release --name dev-release

      - name: Parse Version
        id: parse_version
        shell: pwsh
        run: |
          $match = Select-String -Path pubspec.yaml 'version: \d+.\d+..+' -AllMatches
          $version = $match.Matches.Value.replace("version: ", "")
          "VERSION=$version" >> $env:GITHUB_ENV
          Write-Host "Version parsed successfully ($version)"
          
          echo "::set-output name=version::$version"
      
      - name: Find Release Folder
        id: find_release_folder
        shell: pwsh
        run: |
          function Get-Depth {
            param ( $path )

            $items = Get-ChildItem -Path $path -Directory

            if ($items.Length -eq 0) {
              return $path
            } else {
              return Get-Depth($items[0])
            }
          }

          $releaseFolder = Get-Depth(".\dist")
          $releaseFolder = $releaseFolder.FullName.replace("\", "/")

          echo "::set-output name=release_folder::$releaseFolder" # Set output
          echo "::set-output name=release_folder::$releaseFolder"

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          tag_name: "v${{ steps.parse_version.outputs.version }}"
          name: "v${{ steps.parse_version.outputs.version }}"
          files: "${{ steps.find_release_folder.outputs.release_folder }}/*"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Build-macOS:
    runs-on: macos-latest
    steps:
      - name: Install Checkout@v3
        uses: actions/checkout@v3

      - name: Install Flutter 
        uses: flutter-actions/setup-flutter@v3
        with:
          cache: true
          cache-sdk: true
          version: 3.27.0
          channel: 'stable' # or: 'beta', 'dev', 'master' (or 'main')
      
      - name: Install Flutter Distributor Dependences
        run: |
          npm install -g appdmg
          brew install p7zip

      - name: Install flutter distributor
        run: |
          dart pub global activate flutter_distributor
          export PATH="$PATH":"$HOME/.pub-cache/bin"

      - name: Distribute App
        run: flutter_distributor release --name dev-release
      
      - name: Find Release Folder
        id: find_release_folder
        run: |
          # Function to find the deepest directory
          get_deepest_path() {
              local path="$1"
              local deepest_path="$path"
              local current_path=""

              # Loop through each item in the current directory
              for item in "$path"/*; do
                  # Check if the item is a directory
                  if [ -d "$item" ]; then
                      # Recursively find the deepest directory in the subdirectory
                      current_path=$(get_deepest_path "$item")

                      # Compare depths and update if the current one is deeper
                      if [ "${#current_path}" -gt "${#deepest_path}" ]; then
                          deepest_path="$current_path"
                      fi
                  fi
              done

              echo "$deepest_path"  # Return the deepest path found
          }


          # Get the deepest directory path
          result=$(get_deepest_path "./dist")

          # echo "::set-output name=release_folder::$result"
          echo "::set-output name=release_folder::$result" # Set output

      - name: Parse Version
        id: parse_version
        run: |
          match=$(grep -E 'version: [0-9]+\.[0-9]+\.[0-9]+' pubspec.yaml)
          version=$(echo "$match" | sed 's/version: //')

          echo "version=$version" >> $GITHUB_OUTPUT  # Set output
          echo "::set-output name=version::$version" # Set output

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          tag_name: "v${{ steps.parse_version.outputs.version }}"
          name: "v${{ steps.parse_version.outputs.version }}"
          files: "${{ steps.find_release_folder.outputs.release_folder }}/*"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      